‚úÖ What is Pod Affinity in Kubernetes?
Pod Affinity means:

‚ÄúPlace this pod near/with other specific pods.‚Äù

It tells the Kubernetes scheduler to place a new pod on a node where certain other pods already exist ‚Äî based on labels.

‚úÖ Why is Pod Affinity useful?
Use cases:

To group related pods for faster communication (e.g., web + cache).

To reuse shared local storage.

To reduce latency between pods that must talk frequently.

üîç Types of Affinity:
RequiredDuringScheduling ‚Äì Hard rule. Pod will NOT be scheduled unless the rule matches.

PreferredDuringScheduling ‚Äì Soft rule. Kubernetes will try to follow it, but can schedule elsewhere if needed.

üßæ YAML Example: Pod Affinity
Let‚Äôs place an nginx pod on the same node as a pod labeled app: frontend.

yaml
Copy
Edit
apiVersion: v1
kind: Pod
metadata:
  name: nginx-with-affinity
  labels:
    app: nginx
spec:
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - frontend
          topologyKey: "kubernetes.io/hostname"
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
üîç Explanation:
labelSelector: matches pods with app=frontend.

topologyKey: kubernetes.io/hostname: ensures pods are scheduled on the same node.

requiredDuringScheduling...: must match, else pod won‚Äôt run.

‚úÖ Tip: Create a "frontend" pod first
To make it work, first create a pod like this:

yaml
Copy
Edit
apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod
  labels:
    app: frontend
spec:
  containers:
    - name: httpd
      image: httpd





‚úÖ Pod Affinity with soft rule 

create a pod first 

apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod
  labels:
    app: frontend
spec:
  containers:
    - name: frontend
      image: httpd



Create a deployment with PodAffinity 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-affinity-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-nginx
  template:
    metadata:
      labels:
        app: my-nginx
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: frontend
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 80

üìå Notes:
preferredDuringSchedulingIgnoredDuringExecution: a soft rule

topologyKey: kubernetes.io/hostname: try to schedule on same node

app: frontend: the label of pods this one wants to run near


‚ùì Why are my pods placed on different nodes, even with Pod Affinity (soft rule), and no matching pod existed before deployment?

Your affinity rule says:

"I prefer to run this pod on a node where a pod with app: frontend is already running."

But when you applied the Deployment, there were:

‚ùå No existing pods with label app: frontend

‚ùå So no nodes matched your affinity condition

So the Kubernetes scheduler:

Ignored the preference because it‚Äôs not mandatory

Placed pods on any available nodes based on other factors (like resource availability, taints, spread)




































































