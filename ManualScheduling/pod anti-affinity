‚úÖ ‚úÖ Combined Example
Imagine:

Your nodes are labeled: disktype=ssd

You want:

Pods to run only on ssd nodes.

No two similar pods (e.g., same app) on the same node.

üëâ You use node affinity to pick the right nodes
üëâ You use pod anti-affinity to spread the pods across different nodes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
  labels:
    app: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - my-app
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: my-app-container
        image: nginx
        ports:
        - containerPort: 80


‚úÖ What to do before applying:
Make sure you label your nodes:

bash
Copy
Edit
kubectl label node <node-name> disktype=ssd
Apply the file:

bash
Copy
Edit
kubectl apply -f deployment-with-affinity.yaml


üßæ Your Setup Summary:
Deployment with 3 replicas.

All pods have label: app: my-app.

2 worker nodes, both labeled with disktype=ssd.

You are using:

Node Affinity: Only schedule on nodes with disktype=ssd.

Pod Anti-Affinity: Don't schedule a pod on a node if another pod with label app: my-app is already there.

üîÅ Let's simulate what will happen during scheduling:
1. First pod:
Scheduler finds any node with disktype=ssd ‚Üí Node1 or Node2 are both valid.

No other pods exist yet ‚Üí no conflict with anti-affinity.

Pod is scheduled on, say, Node1.

2. Second pod:
Still needs to go to a node with disktype=ssd.

Pod anti-affinity says: "Don't go to a node that already has a pod with app: my-app."

Node1 already has my-app ‚Üí violates anti-affinity.

So pod goes to Node2.

3. Third pod:
Needs disktype=ssd (both nodes qualify).

But both nodes already have a my-app pod, so anti-affinity blocks scheduling.

‚Üí Pod remains in Pending state.

‚úÖ Final Result:
Pod	Scheduled On	Reason
Pod 1	Node1	Matches node affinity + no conflict with anti-affinity
Pod 2	Node2	Matches node affinity + anti-affinity satisfied
Pod 3	‚ùå Pending	Cannot find a node that satisfies both rules















